!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=16)}([function(t,e){t.exports=React},function(t,e,n){"use strict";function r(t,e){var n=1;return t.stats.forEach(function(t){n*=Math.pow(e(t),t.getValue())}),n}Object.defineProperty(e,"__esModule",{value:!0}),e.gatherRateCalculator=function(t){return r(t,function(t){return t.getGatherMultiplier()})},e.survivalRateCalculator=function(t){return r(t,function(t){return t.getSurvivalMultiplier()})},e.huntRateCalculator=function(t){return r(t,function(t){return t.getHuntMultiplier()})},e.consumptionRateCalculator=function(t){return r(t,function(t){return t.getConsumptionMultiplier()})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.prototype.getName=function(){return o[Math.floor(Math.random()*o.length)]+i[Math.floor(Math.random()*i.length)]},t}();e.NameGenerator=r;var o=["Aqua","Drago","Aero","Veno","Slimer","Fiery","Stinky","Wobbly"],i=["fish","jay","moth","fly","key","mess","pile","wonder","feeler","pillar","ator"]},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){this.stats=new Array(0)}return t.prototype.getStat=function(t){var e=this.stats.filter(function(e){if(e.getName().valueOf()===t)return e});if(0==e.length)throw"No stat exists with name:"+t;return e[0]},t.prototype.addStat=function(t){try{this.getStat(t.getName())}catch(e){this.stats.push(t)}},t}();e.Stats=r;var o=function(){function t(t,e,n,r,o,i){this.name=t,this.survivalMultiplier=e||1,this.gatherMultiplier=n||1,this.huntMultiplier=r||1,this.consumptionMultiplier=o||1,this.costMultiplier=i||1.5,this.cost=1,this.value=1}return t.prototype.increase=function(){this.value++,this.increaseCost()},t.prototype.decrease=function(){this.value--,this.decreaseCost()},t.prototype.getCost=function(){return this.cost},t.prototype.getValue=function(){return this.value},t.prototype.getName=function(){return this.name},t.prototype.getSurvivalMultiplier=function(){return this.survivalMultiplier},t.prototype.getHuntMultiplier=function(){return this.huntMultiplier},t.prototype.getGatherMultiplier=function(){return this.gatherMultiplier},t.prototype.getConsumptionMultiplier=function(){return this.consumptionMultiplier},t.prototype.increaseCost=function(){this.cost=Math.ceil(this.cost*this.costMultiplier)},t.prototype.decreaseCost=function(){this.cost=Math.ceil(this.cost/this.costMultiplier)},t}();e.Stat=o,e.getDefaultStats=function(){var t=new r;return t.addStat(new o("Speed",1.2,1.2,1.2,1.02)),t.addStat(new o("Size",.8,1.1,1.4,1.2)),t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(3),o=n(2),i=n(19),a=n(1),s=function(){function t(t,e,n){this.stats=t,this.populationSize=e,this.features=n,this.dna=0,this.name=(new o.NameGenerator).getName(),this.statUnlocker=new i.StatUnlocker}return t.prototype.getGatherRate=function(){return a.gatherRateCalculator(this.stats)},t.prototype.getHuntRate=function(){return a.huntRateCalculator(this.stats)},t.prototype.getSurvivalRate=function(){return a.survivalRateCalculator(this.stats)},t.prototype.getConsumptionRate=function(){return a.consumptionRateCalculator(this.stats)},t.prototype.updatePopulation=function(t){var e=t*this.getGatherRate();this.populationSize=Math.ceil(e/this.getConsumptionRate())},t.prototype.increaseDna=function(t){this.dna+=t},t.prototype.updateUnlockedStats=function(){var t=this;this.statUnlocker.getUnlockedStats(this.dna).forEach(function(e){t.stats.addStat(e)})},t.prototype.increaseStat=function(t){var e=this.stats.getStat(t),n=e.getCost();n<=this.dna&&(this.dna-=n,e.increase())},t.prototype.decreaseStat=function(t){var e=this.stats.getStat(t);e.getValue()>1&&e.decrease()},t}();e.Species=s,e.getDefaultSpecies=function(){return new s(r.getDefaultStats(),2,[])}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(4),o=n(20),i=function(){function t(){var t=this;this.startGame=function(){setInterval(t.tick,1e3)},this.tick=function(){var e=t.getFoodAbundance();t.updateSpecies(e),t.generateRandomEvents()},this.species=r.getDefaultSpecies(),this.log=new Array(0),this.logSize=20,this.climate=new o.Climate}return t.prototype.updateSpecies=function(t){this.species.updatePopulation(t),this.species.increaseDna(this.species.populationSize),this.species.updateUnlockedStats()},t.prototype.getFoodAbundance=function(){return 10+Math.ceil(100*Math.random())*this.climate.getFoodAbundanceMultiplier()},t.prototype.increaseClimateTemperature=function(){this.climate.temperature.canBeIncreased()&&(this.climate.temperature.increase(),this.addLogMessage(this.climate.temperature.getDescription()))},t.prototype.decreaseClimateTemperature=function(){this.climate.temperature.canBeDecreased()&&(this.climate.temperature.decrease(),this.addLogMessage(this.climate.temperature.getDescription()))},t.prototype.addLogMessage=function(t){this.log.unshift(t),this.log.length>this.logSize&&this.log.pop()},t.prototype.getLogMessages=function(){return this.log},t.prototype.generateRandomEvents=function(){var t=Math.random();t<.05?this.increaseClimateTemperature():t<.1&&this.decreaseClimateTemperature()},t}();e.Game=i},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.render=function(){return i.createElement("div",{className:"header-value-display"},i.createElement("div",{className:"label"},"DNA: "),i.createElement("div",{className:"value",id:"dna"},this.props.dna))},e}(i.Component);e.DnaDisplay=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.render=function(){return i.createElement("div",{className:"header-value-display"},i.createElement("div",{className:"label"},"Population: "),i.createElement("div",{className:"value",id:"population"},this.props.population))},e}(i.Component);e.PopulationDisplay=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.render=function(){return i.createElement("div",{id:"name-box"},this.props.name)},e}(i.Component);e.NameBox=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=n(8),s=n(7),c=n(6),u=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.render=function(){return i.createElement("div",{id:"species-header"},i.createElement(a.NameBox,{name:this.props.species.name}),i.createElement(s.PopulationDisplay,{population:this.props.species.populationSize}),i.createElement(c.DnaDisplay,{dna:this.props.species.dna}))},e}(i.Component);e.SpeciesHeader=u},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.render=function(){var t=this,e=[];return this.props.species.stats.stats.forEach(function(n){e.push(i.createElement("div",{className:"stat-row",key:n.getName()},i.createElement("div",{className:"value-display"},i.createElement("div",{className:"label"},n.getName()),i.createElement("div",{className:"value"},n.getValue())),i.createElement("div",{className:"purchases"},i.createElement("div",{className:"buy"},t.getBuyButton(n)),i.createElement("div",{className:"sell"},t.getSellButton(n)))))}),i.createElement("div",{className:"stats-rows"},i.createElement("div",{className:"stat-header-row"},i.createElement("div",{className:"value-display"},i.createElement("div",{className:"label"},"Stat:"),i.createElement("div",{className:"value"},"Value:")),i.createElement("div",{className:"purchases"},i.createElement("div",{className:"buy"},"Increase:"),i.createElement("div",{className:"sell"},"Decrease:"))),e)},e.prototype.getBuyButton=function(t){return i.createElement("button",{onClick:this.increaseHandler.bind(this,t)},t.getCost())},e.prototype.getSellButton=function(t){return i.createElement("button",{onClick:this.decreaseHandler.bind(this,t)},"Sell")},e.prototype.increaseHandler=function(t){this.props.species.increaseStat(t.getName())},e.prototype.decreaseHandler=function(t){this.props.species.decreaseStat(t.getName())},e}(i.Component);e.StatsRows=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=n(10),s=n(18),c=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.render=function(){return i.createElement("div",{className:"species-box"},i.createElement(s.RatesRows,{species:this.props.species}),i.createElement("br",null),i.createElement(a.StatsRows,{species:this.props.species}))},e}(i.Component);e.SpeciesBox=c},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=n(11),s=n(9),c=n(17),u=n(5),p=function(t){function e(e){var n=t.call(this,e)||this;return n.state={game:new u.Game,interval:0},n.state.game.startGame(),n.tick=n.tick.bind(n),n}return o(e,t),e.prototype.componentDidMount=function(){this.setState({interval:window.setInterval(this.tick,400)})},e.prototype.componentWillUnmount=function(){clearInterval(this.state.interval)},e.prototype.tick=function(){var t=this.state.game;this.setState({game:t})},e.prototype.render=function(){return i.createElement("div",{id:"game-container"},i.createElement(s.SpeciesHeader,{species:this.state.game.species}),i.createElement("div",{id:"game-sections-container"},i.createElement(a.SpeciesBox,{species:this.state.game.species})),i.createElement(c.NewsFeed,{game:this.state.game}))},e}(i.Component);e.GameArea=p},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.render=function(){return i.createElement("div",{id:"title-container"},i.createElement("div",{id:"title"},i.createElement("h2",null,"EVOLUTION")),i.createElement("button",{id:"start-game-button",onClick:this.props.startGameHandler},"Start Game"))},e}(i.Component);e.TitlePage=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=n(13),s=n(12),c=function(t){function e(e){var n=t.call(this,e)||this;return n.state={hasGameStarted:!1},n.startGameHandler=n.startGameHandler.bind(n),n}return o(e,t),e.prototype.render=function(){return this.state.hasGameStarted?i.createElement(s.GameArea,null):i.createElement(a.TitlePage,{startGameHandler:this.startGameHandler})},e.prototype.startGameHandler=function(){this.setState({hasGameStarted:!0})},e}(i.Component);e.Root=c},function(t,e){t.exports=ReactDOM},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),o=n(15),i=n(14);o.render(r.createElement(i.Root,null),document.getElementById("react-root"))},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.render=function(){var t=[];return this.props.game.getLogMessages().forEach(function(e,n){t.push(i.createElement("div",{className:"message",key:n},e))}),i.createElement("div",{id:"news-feed-container"},i.createElement("span",{id:"news-feed-title"},"Events:"),t)},e}(i.Component);e.NewsFeed=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.render=function(){return i.createElement("div",{className:"stats-rows"},i.createElement("div",{className:"stat-header-row"},i.createElement("div",{className:"label"},"Gather Rate:"),i.createElement("div",{className:"value"},this.props.species.getGatherRate())),i.createElement("div",{className:"stat-header-row"},i.createElement("div",{className:"label"},"Consumption Rate:"),i.createElement("div",{className:"value"},this.props.species.getConsumptionRate())))},e}(i.Component);e.RatesRows=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(3),o=function(){function t(){var t,e;this.unlockableStats=(t=new r.Stat("Camouflage",1.5,1,1.1,1.02),e=new r.Stat("Swimming",1.3,1.1,1.1,1.05),[new i(t,2500),new i(e,1e4)])}return t.prototype.getUnlockedStats=function(t){var e=[],n=[];return this.unlockableStats.forEach(function(r){r.dnaToUnlock<t?e.push(r.stat):n.push(r)}),this.unlockableStats=n,e},t}();e.StatUnlocker=o;var i=function(){return function(t,e){this.stat=t,this.dnaToUnlock=e}}()},function(t,e,n){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.Cold=0]="Cold",t[t.Mild=1]="Mild",t[t.Hot=2]="Hot"}(r||(r={}));var o=function(){function t(){this.temperature=new i}return t.prototype.getFoodAbundanceMultiplier=function(){return this.temperature.getFoodAbundanceMultiplier()},t}();e.Climate=o;var i=function(){function t(){this.level=0}return t.prototype.canBeIncreased=function(){return this.level<r.Hot},t.prototype.canBeDecreased=function(){return this.level>r.Cold},t.prototype.increase=function(){this.level++},t.prototype.decrease=function(){this.level--},t.prototype.getDescription=function(){return this.level.toString()},t.prototype.getFoodAbundanceMultiplier=function(){return 1-Math.abs(this.level)/10},t}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,