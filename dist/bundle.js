!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:o})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=23)}([function(t,e){t.exports=React},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.Gather=0]="Gather",t[t.Breeding=1]="Breeding",t[t.Dying=2]="Dying",t[t.Consumption=3]="Consumption"}(e.Rates||(e.Rates={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Number=function(t){return t.toFixed(2)},e.Integer=function(t){return t.toFixed(0)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),r=function(){function t(){this.stats=new Array(0)}return t.prototype.getStat=function(t){var e=this.stats.filter(function(e){if(e.getName().valueOf()===t)return e});if(0==e.length)throw"No stat exists with name:"+t;return e[0]},t.prototype.addStat=function(t){try{this.getStat(t.getName())}catch(e){this.stats.push(t)}},t}();e.Stats=r;var i=function(){function t(t,e,n){this.name=t,this.rates=e,this.costMultiplier=n||4,this.cost=1,this.value=0}return t.prototype.increase=function(){this.value++,this.increaseCost()},t.prototype.decrease=function(){this.value--,this.decreaseCost()},t.prototype.getCost=function(){return this.cost},t.prototype.getValue=function(){return this.value},t.prototype.getName=function(){return this.name},t.prototype.getRateEffect=function(t){return this.rates[t]?this.rates[t]:1},t.prototype.increaseCost=function(){this.cost=Math.ceil(this.cost*this.costMultiplier)},t.prototype.decreaseCost=function(){this.cost=Math.ceil(this.cost/this.costMultiplier)},t}();e.Stat=i,e.getDefaultStats=function(){var t=new r,e=[];return e[o.Rates.Gather]=1.15,e[o.Rates.Dying]=1.0001,t.addStat(new i("Browsing",e)),t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.rateCalculator=function(t,e){var n=1;return t.stats.forEach(function(t){n*=Math.pow(t.getRateEffect(e),t.getValue())}),n-1}},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(3),s=n(1),a=n(24);e.getStatUnlocker=function(){return new a.Unlocker(u)};var c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(a.Unlockable);function u(){var t=[];t[s.Rates.Breeding]=1.05,t[s.Rates.Dying]=1.001,t[s.Rates.Consumption]=1.005;var e=new i.Stat("Breeding",t),n=[];n[s.Rates.Dying]=.999,n[s.Rates.Consumption]=1.01;var o=new i.Stat("Camouflage",n,20);return[new c(e,500),new c(o,2500)]}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(){}return t.prototype.getName=function(){return r[Math.floor(Math.random()*r.length)]+i[Math.floor(Math.random()*i.length)]},t}();e.NameGenerator=o;var r=["Aqua","Drago","Aero","Veno","Slimer","Fiery","Stinky","Wobbly"],i=["fish","jay","moth","fly","key","mess","pile","wonder","feeler","pillar","ator"]},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(3),r=n(6),i=n(5),s=n(26),a=n(1),c=n(4),u=function(){function t(t,e,n,o){var a=this;this.stats=t,this.populationSize=e,this.features=n,this.gatherFood=function(){a.food+=a.getClickRate()},this.dna=3e3,this.food=0,this.name=(new r.NameGenerator).getName(),this.statUnlocker=i.getStatUnlocker(),this.eventsUnlocker=s.getEventUnlocker(),this.log=o}return t.prototype.getRate=function(t){return c.rateCalculator(this.stats,t)*this.populationSize},t.prototype.getClickRate=function(){return c.rateCalculator(this.stats,a.Rates.Gather)+1},t.prototype.getFoodIncreaseRate=function(){return this.getRate(a.Rates.Gather)-this.getRate(a.Rates.Consumption)},t.prototype.getPopulationIncreaseRate=function(){return this.getRate(a.Rates.Breeding)-this.getRate(a.Rates.Dying)*this.populationSize},t.prototype.update=function(){this.updateFood(),this.updatePopulation(),this.increaseDna(this.populationSize),this.unlockFeatures()},t.prototype.updateFood=function(){this.food+=this.getFoodIncreaseRate(),this.food<0&&(this.food=0)},t.prototype.updatePopulation=function(){this.populationSize+=this.getPopulationIncreaseRate(),this.populationSize+=Math.floor(this.food/50),this.food%=50},t.prototype.increaseDna=function(t){this.dna+=t},t.prototype.unlockFeatures=function(){var t=this;this.statUnlocker.getUnlockedItems(this.dna).forEach(function(e){t.stats.addStat(e)}),this.eventsUnlocker.getUnlockedItems(this.dna).forEach(function(e){e.doEffect(t.stats),t.log.addMessage(e.displayText)})},t.prototype.increaseStat=function(t){var e=this.stats.getStat(t),n=e.getCost();n<=this.dna&&(this.dna-=n,e.increase())},t.prototype.decreaseStat=function(t){var e=this.stats.getStat(t);e.getValue()>0&&e.decrease()},t}();e.Species=u,e.getDefaultSpecies=function(t){return new u(o.getDefaultStats(),2,[],t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(7),r=n(27),i=function(){function t(){var t=this;this.startGame=function(){setInterval(t.tick,1e3)},this.tick=function(){t.species.update(),t.generateRandomEvents()},this.log=new r.Log,this.species=o.getDefaultSpecies(this.log)}return t.prototype.generateRandomEvents=function(){Math.random()},t}();e.Game=i},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),s=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.render=function(){var t=[];return this.props.game.log.messages.forEach(function(e,n){t.push(i.createElement("div",{className:"message",key:n},e))}),i.createElement("div",{id:"news-feed-container"},i.createElement("span",{id:"news-feed-title"},"Events:"),t)},e}(i.Component);e.NewsFeed=s},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),s=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.render=function(){return i.createElement("div",{className:"btn",id:"gather-button"},i.createElement("button",{onClick:this.props.species.gatherFood},"GATHER FOOD"))},e}(i.Component);e.GatherButton=s},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),s=n(2),a=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.render=function(){var t=this.props.species;return i.createElement("div",{className:"header-value-display"},i.createElement("div",{className:"label"},"Food: "),i.createElement("div",{className:"value",id:"food"},s.Integer(t.food)),i.createElement("div",{className:"rate"},s.Number(t.getFoodIncreaseRate())))},e}(i.Component);e.FoodDisplay=a},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),s=n(2),a=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.render=function(){var t=this.props.species;return i.createElement("div",{className:"header-value-display"},i.createElement("div",{className:"label"},"DNA: "),i.createElement("div",{className:"value",id:"dna"},s.Integer(t.dna)),i.createElement("div",{className:"increase"},s.Integer(t.populationSize)))},e}(i.Component);e.DnaDisplay=a},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),s=n(2),a=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.render=function(){var t=this.props.species;return i.createElement("div",{className:"header-value-display"},i.createElement("div",{className:"label"},"Population: "),i.createElement("div",{className:"value",id:"population"},s.Integer(t.populationSize)),i.createElement("div",{className:"rate"}," ",s.Number(t.getPopulationIncreaseRate()+t.getFoodIncreaseRate()/50)))},e}(i.Component);e.PopulationDisplay=a},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),s=n(13),a=n(12),c=n(11),u=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.render=function(){return i.createElement("div",{id:"dna-box"},i.createElement(s.PopulationDisplay,{species:this.props.species}),i.createElement(a.DnaDisplay,{species:this.props.species}),i.createElement(c.FoodDisplay,{species:this.props.species}))},e}(i.Component);e.DnaBox=u},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),s=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.render=function(){return i.createElement("div",{id:"name-box"},this.props.name)},e}(i.Component);e.NameBox=s},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),s=n(15),a=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.render=function(){return i.createElement("div",{id:"species-header"},i.createElement(s.NameBox,{name:this.props.species.name}))},e}(i.Component);e.SpeciesHeader=a},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),s=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.render=function(){var t=this,e=[];return this.props.species.stats.stats.forEach(function(n){e.push(i.createElement("div",{className:"stat-row",key:n.getName()},i.createElement("div",{className:"value-display"},i.createElement("div",{className:"label"},n.getName()),i.createElement("div",{className:"value"},n.getValue())),i.createElement("div",{className:"purchases"},i.createElement("div",{className:"buy"},t.getBuyButton(n)),i.createElement("div",{className:"sell"},t.getSellButton(n)))))}),i.createElement("div",{className:"stats-rows"},i.createElement("div",{className:"stat-header-row"},i.createElement("div",{className:"value-display"},i.createElement("div",{className:"label"},"Stat:"),i.createElement("div",{className:"value"},"Value:")),i.createElement("div",{className:"purchases"},i.createElement("div",{className:"buy"},"Increase:"),i.createElement("div",{className:"sell"},"Decrease:"))),e)},e.prototype.getBuyButton=function(t){return i.createElement("button",{onClick:this.increaseHandler.bind(this,t)},t.getCost())},e.prototype.getSellButton=function(t){return i.createElement("button",{onClick:this.decreaseHandler.bind(this,t)},"Sell")},e.prototype.increaseHandler=function(t){this.props.species.increaseStat(t.getName())},e.prototype.decreaseHandler=function(t){this.props.species.decreaseStat(t.getName())},e}(i.Component);e.StatsRows=s},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),s=n(17),a=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.render=function(){return i.createElement("div",{className:"species-box"},i.createElement(s.StatsRows,{species:this.props.species}))},e}(i.Component);e.SpeciesBox=a},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),s=n(18),a=n(16),c=n(14),u=n(10),p=n(9),l=n(8),f=function(t){function e(e){var n=t.call(this,e)||this;return n.state={game:new l.Game,interval:0},n.state.game.startGame(),n.tick=n.tick.bind(n),n}return r(e,t),e.prototype.componentDidMount=function(){this.setState({interval:window.setInterval(this.tick,400)})},e.prototype.componentWillUnmount=function(){clearInterval(this.state.interval)},e.prototype.tick=function(){var t=this.state.game;this.setState({game:t})},e.prototype.render=function(){var t=this.state.game.species;return i.createElement("div",{id:"game-container"},i.createElement(a.SpeciesHeader,{species:t}),i.createElement("div",{id:"game-sections-container"},i.createElement(s.SpeciesBox,{species:t}),i.createElement(u.GatherButton,{species:t}),i.createElement(c.DnaBox,{species:t})),i.createElement(p.NewsFeed,{game:this.state.game}))},e}(i.Component);e.GameArea=f},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),s=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.render=function(){return i.createElement("div",{id:"title-container"},i.createElement("div",{id:"title"},i.createElement("h2",null,"EVOLUTION")),i.createElement("button",{id:"start-game-button",onClick:this.props.startGameHandler},"Start Game"))},e}(i.Component);e.TitlePage=s},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),s=n(20),a=n(19),c=function(t){function e(e){var n=t.call(this,e)||this;return n.state={hasGameStarted:!1},n.startGameHandler=n.startGameHandler.bind(n),n}return r(e,t),e.prototype.render=function(){return this.state.hasGameStarted?i.createElement(a.GameArea,null):i.createElement(s.TitlePage,{startGameHandler:this.startGameHandler})},e.prototype.startGameHandler=function(){this.setState({hasGameStarted:!0})},e}(i.Component);e.Root=c},function(t,e){t.exports=ReactDOM},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),r=n(22),i=n(21);r.render(o.createElement(i.Root,null),document.getElementById("react-root"))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t){this.unlockables=t()}return t.prototype.getUnlockedItems=function(t){var e=[],n=[];return this.unlockables.forEach(function(t){t.dnaToUnlock?e.push(t.item):n.push(t)}),this.unlockables=n,e},t}();e.Unlocker=o;var r=function(){return function(t,e){this.item=t,this.dnaToUnlock=e}}();e.Unlockable=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){this.displayText=t,this.effect=function(t){},e&&(this.effect=e)}return t.prototype.doEffect=function(t){this.effect(t)},t}();e.Event=o},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(25),s=n(24);e.getEventUnlocker=function(){return new s.Unlocker(c)};var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(s.Unlockable);function c(){var t=new i.Event("Oops, you just got worse at eating",function(t){var e=t.getStat("Browsing");e&&e.getValue()>0&&e.decrease()});return[new a(t,500)]}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(){this.logSize=20,this.messages=new Array(0)}return t.prototype.addMessage=function(t){this.messages.unshift(t),this.messages.length>this.logSize&&this.messages.pop()},t}();e.Log=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,