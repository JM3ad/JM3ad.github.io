!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=10)}([function(t,e){t.exports=React},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.gatherRateCalculator=function(t){var e=0;return t.stats.forEach(function(t){e+=t.getValue()*t.getGatherMultiplier()}),e},e.survivalRateCalculator=function(t){var e=0;return t.stats.forEach(function(t){e+=t.getValue()*t.getSurvivalMultiplier()}),e},e.huntRateCalculator=function(t){var e=0;return t.stats.forEach(function(t){e+=t.getValue()*t.getHuntMultiplier()}),e},e.consumptionRateCalculator=function(t){var e=1;return t.stats.forEach(function(t){e+=t.getValue()*t.getHuntMultiplier()}),e}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.prototype.getName=function(){return o[Math.floor(Math.random()*o.length)]+i[Math.floor(Math.random()*i.length)]},t}();e.NameGenerator=r;var o=["Aqua","Drago","Aero","Veno","Slimer","Fiery","Stinky","Wobbly"],i=["fish","jay","moth","fly","key","mess","pile","wonder","feeler","pillar","ator"]},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){this.stats=new Array(0)}return t.prototype.getStat=function(t){var e=this.stats.filter(function(e){if(e.getName().valueOf()===t)return e});if(0==e.length)throw"No stat exists with name:"+t;return e[0]},t.prototype.addStat=function(t){try{this.getStat(t.getName())}catch(e){this.stats.push(t)}},t}();e.Stats=r;var o=function(){function t(t,e,n,r,o){this.name=t,this.survivalMultiplier=e||0,this.gatherMultiplier=n||0,this.huntMultiplier=r||0,this.consumptionMultiplier=o||0,this.cost=1,this.value=1}return t.prototype.increase=function(){this.value++,this.updateCost()},t.prototype.decrease=function(){this.value--},t.prototype.getCost=function(){return this.cost},t.prototype.getValue=function(){return this.value},t.prototype.getName=function(){return this.name},t.prototype.getSurvivalMultiplier=function(){return this.survivalMultiplier},t.prototype.getHuntMultiplier=function(){return this.huntMultiplier},t.prototype.getGatherMultiplier=function(){return this.gatherMultiplier},t.prototype.getConsumptionMultiplier=function(){return this.consumptionMultiplier},t.prototype.updateCost=function(){Math.ceil(1.2*this.cost)},t}();e.Stat=o,e.getDefaultStats=function(){var t=new r;return t.addStat(new o("Speed",1,1,1,.2)),t.addStat(new o("Size",-1,.5,.5,1)),t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(3),o=n(2),i=n(1),a=function(){function t(t,e,n){this.stats=t,this.populationSize=e,this.features=n,this.dna=0,this.name=(new o.NameGenerator).getName()}return t.prototype.getGatherRate=function(){return i.gatherRateCalculator(this.stats)},t.prototype.getHuntRate=function(){return i.huntRateCalculator(this.stats)},t.prototype.getSurvivalRate=function(){return i.survivalRateCalculator(this.stats)},t.prototype.getConsumptionRate=function(){return i.consumptionRateCalculator(this.stats)},t.prototype.updatePopulation=function(t){this.populationSize=Math.floor(t/(this.getConsumptionRate()*this.populationSize)),this.increaseDna(this.populationSize)},t.prototype.increaseDna=function(t){this.dna+=t},t.prototype.increaseStat=function(t){var e=this.stats.getStat(t),n=e.getCost();n<=this.dna&&(this.dna-=n,e.increase())},t}();e.Species=a,e.getDefaultSpecies=function(){return new a(r.getDefaultStats(),2,[])}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(4),o=function(){function t(){var t=this;this.startGame=function(){setInterval(t.tick,1e3)},this.tick=function(){var e=t.getTotalFood();t.updatePopulation(e)},this.species=r.getDefaultSpecies(),this.log=new Array(0)}return t.prototype.updatePopulation=function(t){this.species.updatePopulation(t)},t.prototype.getTotalFood=function(){return Math.ceil(100*Math.random())},t.prototype.addLogMessage=function(t){this.log.push(t)},t.prototype.getLogMessages=function(){var t=this.log;return this.log=new Array(0),t},t}();e.Game=o},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=n(15),s=n(16),u=n(5),c=function(t){function e(e){var n=t.call(this,e)||this;return n.state={game:new u.Game,interval:0},n.state.game.startGame(),n.tick=n.tick.bind(n),n}return o(e,t),e.prototype.componentDidMount=function(){this.setState({interval:window.setInterval(this.tick,1e3)})},e.prototype.componentWillUnmount=function(){clearInterval(this.state.interval)},e.prototype.tick=function(){var t=this.state.game;this.setState({game:t})},e.prototype.render=function(){return i.createElement("div",{id:"game-container"},i.createElement(s.SpeciesHeader,{species:this.state.game.species}),i.createElement("div",{id:"game-sections-container"},i.createElement(a.SpeciesBox,{species:this.state.game.species})),i.createElement("div",{id:"news-feed-container"}))},e}(i.Component);e.GameArea=c},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.render=function(){return i.createElement("div",{id:"title-container"},i.createElement("div",{id:"title"},i.createElement("h2",null,"EVOLUTION")),i.createElement("button",{id:"start-game-button",onClick:this.props.startGameHandler},"Start Game"))},e}(i.Component);e.TitlePage=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=n(7),s=n(6),u=function(t){function e(e){var n=t.call(this,e)||this;return n.state={hasGameStarted:!1},n.startGameHandler=n.startGameHandler.bind(n),n}return o(e,t),e.prototype.render=function(){return this.state.hasGameStarted?i.createElement(s.GameArea,null):i.createElement(a.TitlePage,{startGameHandler:this.startGameHandler})},e.prototype.startGameHandler=function(){this.setState({hasGameStarted:!0})},e}(i.Component);e.Root=u},function(t,e){t.exports=ReactDOM},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),o=n(9),i=n(8);o.render(r.createElement(i.Root,null),document.getElementById("react-root"))},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.render=function(){var t=[];return this.props.stats.stats.forEach(function(e){t.push(i.createElement("div",{className:"stat-row"},i.createElement("div",{className:"value-display"},i.createElement("div",{className:"label"},e.getName()),i.createElement("div",{className:"value"},e.getValue())),i.createElement("div",{className:"changes"})))}),i.createElement("div",{className:"stats-rows"},t)},e}(i.Component);e.StatsRows=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.render=function(){return i.createElement("div",{className:"value-display"},i.createElement("div",{className:"label"},"DNA: "),i.createElement("div",{className:"value",id:"dna"},this.props.dna))},e}(i.Component);e.DnaDisplay=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.render=function(){return i.createElement("div",{className:"value-display"},i.createElement("div",{className:"label"},"Population: "),i.createElement("div",{className:"value",id:"population"},this.props.population))},e}(i.Component);e.PopulationDisplay=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.render=function(){return i.createElement("div",{id:"name-box"},this.props.name)},e}(i.Component);e.NameBox=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=n(11),s=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.render=function(){return i.createElement("div",{className:"species-box"},i.createElement(a.StatsRows,{stats:this.props.species.stats}))},e}(i.Component);e.SpeciesBox=s},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=n(14),s=n(13),u=n(12),c=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.render=function(){return i.createElement("div",{id:"species-header"},i.createElement(a.NameBox,{name:this.props.species.name}),i.createElement(s.PopulationDisplay,{population:this.props.species.populationSize}),i.createElement(u.DnaDisplay,{dna:this.props.species.dna}))},e}(i.Component);e.SpeciesHeader=c}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,